import java.util.*;
import javax.swing.*;
import java.io.*;

public class MentalHealthSupportSystem {

    private TreeNode root; // Binary tree root for therapists
    private HashMap<String, Patient> patientProfiles; // HashMap for patient profiles

    public MentalHealthSupportSystem() {
        root = null;
        patientProfiles = new HashMap<>();
    }

    // Add therapist to the tree
    public void addTherapist(Therapist therapist) {
        root = addTherapistRec(root, therapist);
    }

    private TreeNode addTherapistRec(TreeNode root, Therapist therapist) {
        if (root == null) {
            return new TreeNode(therapist);
        }
        if (therapist.getName().compareTo(root.therapist.getName()) < 0) {
            root.left = addTherapistRec(root.left, therapist);
        } else {
            root.right = addTherapistRec(root.right, therapist);
        }
        return root;
    }

    // Search for therapists by specialization
    public List<String> searchTherapist(String specialization) {
        List<String> results = new ArrayList<>();
        searchTherapistRec(root, specialization, results);
        return results;
    }

    private void searchTherapistRec(TreeNode root, String specialization, List<String> results) {
        if (root != null) {
            if (root.therapist.getSpecialization().equalsIgnoreCase(specialization)) {
                results.add(root.therapist.toString());
            }
            searchTherapistRec(root.left, specialization, results);
            searchTherapistRec(root.right, specialization, results);
        }
    }

    // Add patient profile
    public void addPatientProfile(Patient patient) {
        patientProfiles.put(patient.getId(), patient);
    }

    // Save data to a file
    public void saveDataToFile(String filename) {
        try (PrintWriter writer = new PrintWriter(new FileWriter(filename))) {
            writer.println("Therapists:");
            saveTherapistsRec(root, writer);
            writer.println("Patient Profiles:");
            patientProfiles.forEach((id, patient) -> writer.println(patient.toString()));
            JOptionPane.showMessageDialog(null, "Data saved successfully to " + filename, "Save Successful", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error saving data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void saveTherapistsRec(TreeNode root, PrintWriter writer) {
        if (root != null) {
            writer.println(root.therapist.toString());
            saveTherapistsRec(root.left, writer);
            saveTherapistsRec(root.right, writer);
        }
    }

    // Load data from a file
    public void loadDataFromFile(String filename) {
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String line;
            boolean isTherapistSection = true;
            while ((line = reader.readLine()) != null) {
                if (line.equals("Therapists:")) {
                    isTherapistSection = true;
                } else if (line.equals("Patient Profiles:")) {
                    isTherapistSection = false;
                } else if (isTherapistSection) {
                    String[] parts = line.split(", ");
                    String name = parts[0].split("=")[1];
                    String specialization = parts[1].split("=")[1];
                    String location = parts[2].split("=")[1].replace('}', ' ').trim();
                    addTherapist(new Therapist(name, specialization, location));
                } else {
                    String[] parts = line.split(", Details: ");
                    String id = parts[0].split(": ")[1];
                    String details = parts[1];
                    addPatientProfile(new Patient(id, details));
                }
            }
            JOptionPane.showMessageDialog(null, "Data loaded successfully from " + filename, "Load Successful", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error loading data: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Main Method
    public static void main(String[] args) {
        MentalHealthSupportSystem system = new MentalHealthSupportSystem();

        while (true) {
            String[] options = {
                "Add Therapist"
              , "Search Therapist"
              , "Add Patient Profile"
              , "View Patient Profiles"
              , "Save Data"
              , "Load Data"
              , "Exit"
            };
            int choice = JOptionPane.showOptionDialog(
                    null, "Choose an option:", "Mental Health Support System",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]
            );

            if (choice == -1 || choice == 6) {
                int confirmExit = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Confirm Exit", JOptionPane.YES_NO_OPTION);
                if (confirmExit == JOptionPane.YES_OPTION) {
                    break;
                } else {
                    continue;
                }
            }

            switch (choice) {
                case 0: // Add Therapist
                    String tName = JOptionPane.showInputDialog(null, "Enter Therapist Name:", "Add Therapist", JOptionPane.PLAIN_MESSAGE);
                    String tSpecialization = JOptionPane.showInputDialog(null, "Enter Therapist Specialization:", "Add Therapist", JOptionPane.PLAIN_MESSAGE);
                    String tLocation = JOptionPane.showInputDialog(null, "Enter Therapist Location:", "Add Therapist", JOptionPane.PLAIN_MESSAGE);

                    if (tName != null && tSpecialization != null && tLocation != null && !tName.isEmpty() && !tSpecialization.isEmpty() && !tLocation.isEmpty()) {
                        system.addTherapist(new Therapist(tName.trim(), tSpecialization.trim(), tLocation.trim()));
                        JOptionPane.showMessageDialog(null, "Therapist Added Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid input. Please provide all details.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 1: // Search Therapist
                    String specialization = JOptionPane.showInputDialog(null, "Enter Specialization to Search:", "Search Therapist", JOptionPane.PLAIN_MESSAGE);
                    if (specialization != null && !specialization.isEmpty()) {
                        List<String> results = system.searchTherapist(specialization.trim());
                        if (results.isEmpty()) {
                            JOptionPane.showMessageDialog(null, "No Therapists Found with Specialization: " + specialization, "No Results", JOptionPane.WARNING_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "Therapists Found:\n" + String.join("\n", results), "Search Results", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Specialization cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 2: // Add Patient Profile
                    String pId = JOptionPane.showInputDialog(null, "Enter Patient ID:", "Add Patient Profile", JOptionPane.PLAIN_MESSAGE);
                    String pDetails = JOptionPane.showInputDialog(null, "Enter Patient Details:", "Add Patient Profile", JOptionPane.PLAIN_MESSAGE);

                    if (pId != null && pDetails != null && !pId.isEmpty() && !pDetails.isEmpty()) {
                        system.addPatientProfile(new Patient(pId.trim(), pDetails.trim()));
                        JOptionPane.showMessageDialog(null, "Patient Profile Added Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalid input. Please provide all details.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 3: // View Patient Profiles
                    if (system.patientProfiles.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "No Patient Profiles Available", "Empty Profiles", JOptionPane.WARNING_MESSAGE);
                    } else {
                        StringBuilder profiles = new StringBuilder("Patient Profiles:\n");
                        system.patientProfiles.forEach((id, patient) -> profiles.append(patient.toString()).append("\n"));
                        JOptionPane.showMessageDialog(null, profiles.toString(), "Patient Profiles", JOptionPane.INFORMATION_MESSAGE);
                    }
                    break;

                case 4: // Save Data
                    String saveFilename = JOptionPane.showInputDialog(null, "Enter Filename to Save Data:", "Save Data", JOptionPane.PLAIN_MESSAGE);
                    if (saveFilename != null && !saveFilename.isEmpty()) {
                        int confirmSave = JOptionPane.showConfirmDialog(null, "Are you sure you want to save to " + saveFilename + "?", "Confirm Save", JOptionPane.YES_NO_OPTION);
                        if (confirmSave == JOptionPane.YES_OPTION) {
                            system.saveDataToFile(saveFilename.trim());
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Filename cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;

                case 5: // Load Data
                    String loadFilename = JOptionPane.showInputDialog(null, "Enter Filename to Load Data:", "Load Data", JOptionPane.PLAIN_MESSAGE);
                    if (loadFilename != null && !loadFilename.isEmpty()) {
                        int confirmLoad = JOptionPane.showConfirmDialog(null, "Are you sure you want to load from " + loadFilename + "?", "Confirm Load", JOptionPane.YES_NO_OPTION);
                        if (confirmLoad == JOptionPane.YES_OPTION) {
                            system.loadDataFromFile(loadFilename.trim());
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Filename cannot be empty.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    }
                    break;
            }
        }
    }
}

