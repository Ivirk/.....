import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;

// Node class for the tree representing therapists and patients
class TreeNode {
    String name;
    String specialization;
    String location;
    TreeNode left, right;

    public TreeNode(String name, String specialization, String location) {
        this.name = name;
        this.specialization = specialization;
        this.location = location;
        this.left = this.right = null;
    }
}

// Main class
public class MentalHealthSupportSystem {

    private TreeNode root; // Binary tree root for therapists
    private HashMap<String, String> patientProfiles; // HashMap for patient profiles

    public MentalHealthSupportSystem() {
        root = null;
        patientProfiles = new HashMap<>();
    }

    // Add therapist to the tree
    public void addTherapist(String name, String specialization, String location) {
        root = addTherapistRec(root, name, specialization, location);
    }

    private TreeNode addTherapistRec(TreeNode root, String name, String specialization, String location) {
        if (root == null) {
            return new TreeNode(name, specialization, location);
        }
        if (name.compareTo(root.name) < 0) {
            root.left = addTherapistRec(root.left, name, specialization, location);
        } else {
            root.right = addTherapistRec(root.right, name, specialization, location);
        }
        return root;
    }

    // Search for therapists by specialization
    public List<String> searchTherapist(String specialization) {
        List<String> results = new ArrayList<>();
        searchTherapistRec(root, specialization, results);
        return results;
    }

    private void searchTherapistRec(TreeNode root, String specialization, List<String> results) {
        if (root != null) {
            if (root.specialization.equalsIgnoreCase(specialization)) {
                results.add(root.name + " - Location: " + root.location);
            }
            searchTherapistRec(root.left, specialization, results);
            searchTherapistRec(root.right, specialization, results);
        }
    }

    // Add patient profile
    public void addPatientProfile(String id, String details) {
        patientProfiles.put(id, details);
    }

    // Save data to a file
    public void saveDataToFile(String filename) {
        try (PrintWriter writer = new PrintWriter(new FileWriter(filename))) {
            writer.println("Therapists:");
            saveTherapistsRec(root, writer);
            writer.println("Patient Profiles:");
            patientProfiles.forEach((id, details) -> writer.println("ID: " + id + ", Details: " + details));
        } catch (IOException e) {
            System.err.println("Error saving data: " + e.getMessage());
        }
    }

    private void saveTherapistsRec(TreeNode root, PrintWriter writer) {
        if (root != null) {
            writer.println(root.name + " | Specialization: " + root.specialization + " | Location: " + root.location);
            saveTherapistsRec(root.left, writer);
            saveTherapistsRec(root.right, writer);
        }
    }

    // Load data from a file
    public void loadDataFromFile(String filename) {
        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            String line;
            boolean isTherapistSection = true;

            while ((line = reader.readLine()) != null) {
                if (line.equals("Therapists:")) {
                    isTherapistSection = true;
                } else if (line.equals("Patient Profiles:")) {
                    isTherapistSection = false;
                } else if (isTherapistSection) {
                    String[] parts = line.split(" \| ");
                    String name = parts[0];
                    String specialization = parts[1].split(": ")[1];
                    String location = parts[2].split(": ")[1];
                    addTherapist(name, specialization, location);
                } else {
                    String[] parts = line.split(", Details: ");
                    String id = parts[0].split(": ")[1];
                    String details = parts[1];
                    addPatientProfile(id, details);
                }
            }
        } catch (IOException e) {
            System.err.println("Error loading data: " + e.getMessage());
        }
    }

    // Display GUI
    public void displayGUI() {
        JFrame frame = new JFrame("Mental Health Support System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400);

        JPanel panel = new JPanel(new GridLayout(0, 1));

        JButton addTherapistBtn = new JButton("Add Therapist");
        JButton searchTherapistBtn = new JButton("Search Therapist");
        JButton addPatientBtn = new JButton("Add Patient Profile");
        JButton viewPatientsBtn = new JButton("View Patient Profiles");
        JButton saveDataBtn = new JButton("Save Data");
        JButton loadDataBtn = new JButton("Load Data");

        // Add Therapist
        addTherapistBtn.addActionListener(e -> {
            JTextField nameField = new JTextField();
            JTextField specField = new JTextField();
            JTextField locationField = new JTextField();
            Object[] fields = {
                "Name:", nameField,
                "Specialization:", specField,
                "Location:", locationField
            };
            int option = JOptionPane.showConfirmDialog(null, fields, "Add Therapist", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                addTherapist(nameField.getText(), specField.getText(), locationField.getText());
                JOptionPane.showMessageDialog(frame, "Therapist Added Successfully");
            }
        });

        // Search Therapist
        searchTherapistBtn.addActionListener(e -> {
            String specialization = JOptionPane.showInputDialog(frame, "Enter Specialization to Search:");
            if (specialization != null && !specialization.isEmpty()) {
                List<String> results = searchTherapist(specialization);
                if (results.isEmpty()) {
                    JOptionPane.showMessageDialog(frame, "No Therapists Found with Specialization: " + specialization);
                } else {
                    JOptionPane.showMessageDialog(frame, String.join("\n", results));
                }
            }
        });

        // Add Patient Profile
        addPatientBtn.addActionListener(e -> {
            JTextField idField = new JTextField();
            JTextField detailsField = new JTextField();
            Object[] fields = {
                "Patient ID:", idField,
                "Details:", detailsField
            };
            int option = JOptionPane.showConfirmDialog(null, fields, "Add Patient Profile", JOptionPane.OK_CANCEL_OPTION);
            if (option == JOptionPane.OK_OPTION) {
                addPatientProfile(idField.getText(), detailsField.getText());
                JOptionPane.showMessageDialog(frame, "Patient Profile Added Successfully");
            }
        });

        // View Patient Profiles
        viewPatientsBtn.addActionListener(e -> {
            StringBuilder profiles = new StringBuilder("Patient Profiles:\n");
            patientProfiles.forEach((id, details) -> profiles.append("ID: ").append(id).append(", Details: ").append(details).append("\n"));
            JOptionPane.showMessageDialog(frame, profiles.toString());
        });

        // Save Data
        saveDataBtn.addActionListener(e -> {
            String filename = JOptionPane.showInputDialog(frame, "Enter Filename to Save Data:");
            if (filename != null && !filename.isEmpty()) {
                saveDataToFile(filename);
                JOptionPane.showMessageDialog(frame, "Data Saved Successfully");
            }
        });

        // Load Data
        loadDataBtn.addActionListener(e -> {
            String filename = JOptionPane.showInputDialog(frame, "Enter Filename to Load Data:");
            if (filename != null && !filename.isEmpty()) {
                loadDataFromFile(filename);
                JOptionPane.showMessageDialog(frame, "Data Loaded Successfully");
            }
        });

        panel.add(addTherapistBtn);
        panel.add(searchTherapistBtn);
        panel.add(addPatientBtn);
        panel.add(viewPatientsBtn);
        panel.add(saveDataBtn);
        panel.add(loadDataBtn);

        frame.add(panel);
        frame.setVisible(true);
    }
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            MentalHealthSupportSystem system = new MentalHealthSupportSystem();
            system.displayGUI();
        });
    }
}
